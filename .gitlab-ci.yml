variables:
  PYTHON_VER: "3.10"
  IMAGE_NAME: "miniforge-python"
  GIT_DEPTH: 2

stages:
  - compile
  - build
  - test

cache:
  paths:
    - ./$CI_PIPELINE_ID

before_script:
  - pwd
  - echo $CI_PIPELINE_ID
  - source activate ./$CI_PIPELINE_ID

configure_env:
  stage: .pre
  tags:
    - docker
    - linux
  image: registry.orr.noaa.gov/erd/centos-conda/$IMAGE_NAME$PYTHON_VER
  before_script:
    - echo '' # manual override of before_script because we're on runner 12.3 and inherit options are only 12.9+
  script:
    - conda create --prefix ./$CI_PIPELINE_ID
  artifacts:
    expire_in: 5 days
    paths:
      - ./$CI_PIPELINE_ID

compile_pygnome:
  stage: compile
  tags:
    - docker
    - linux
  image: registry.orr.noaa.gov/erd/centos-conda/$IMAGE_NAME$PYTHON_VER
  script:
    - echo "compiling PyGNOME"
    - yum install gcc gcc-c++ make libXext libSM libXrender -y

    # get the adios_db code: needed for tests and requirements
    - git clone --depth 1 -b develop https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.orr.noaa.gov/gnome/oil_database/oil_database.git
    - cd ./py_gnome
    - conda install -y python=$PYTHON_VER --file conda_requirements.txt
                                          --file conda_requirements_build.txt
                                          --file ../oil_database/adios_db/conda_requirements.txt

    # install adios_db
    - pip install ../oil_database/adios_db/

    # install pygnome
    #python -m build --no-isolation
    - pip install ./

    # need extra requirements for the docs
    - conda install -y --file conda_requirements_docs.txt
    - cd documentation && make html  # build the docs
  artifacts:
    when: always
    expire_in: 15 days
    paths:
      - ./$CI_PIPELINE_ID
      - ./py_gnome/documentation/build/html
      - ./conda_packages.txt

test_pygnome:
  stage: test
  tags:
    - docker
    - linux
  allow_failure: false
  image: registry.orr.noaa.gov/erd/centos-conda/$IMAGE_NAME$PYTHON_VER
  script:
    - conda install -y --file py_gnome/conda_requirements_test.txt
    - cd ./py_gnome/tests/unit_tests && pytest --runslow

    # save the package list if tests pass
    - conda list > conda_packages.txt

# Ideally, all the scripts in "testing_scripts" should run without errors,
# but once in a while we refactor something that breaks something.
# So it would be good to get a warning from the CI.
# This shouldn't be a "it has to pass" job.
test_pygnome_scripts:
  stage: test
  tags:
    - docker
    - linux
  allow_failure: true
  image: registry.orr.noaa.gov/erd/centos-conda/centos7-python$PYTHON_VER
  script:
    - cd ./py_gnome/scripts/testing_scripts && python run_all.py 2<&1


# We will not build a windows docker image, but we do want to know if there are
# any windows specific problems.
# So this job tries to compile PyGnome on Windows and run the pytests.
#
# Unfortunately, the Windows GitLab runner is running PowerShell, so it can't
# really be a true apples-to-apples test of a normal manual install on windows.
# Oh well, at least we can test the code.

test_pygnome_windows:
  stage: test
  tags:
    - windows
    - visual-studio-22
  allow_failure: true
  before_script:
    - echo $CI_PIPELINE_ID

    # where are we?
    - Get-Location
    - Get-ChildItem | % { $_.FullName }  # this should list the current folder
    - $Env:PathOrig = $Env:Path
    - $Env:CurrDir = Get-Location
 
    # Where is our conda installation?
    # This will tell us where python is installed.  This could change periodically
    #- Get-ChildItem -Path 'C:\Python310' -Recurse -Include "python.exe", "conda.exe" | % { $_.FullName }
    #- Get-ChildItem -Path 'C:\ProgramData\miniforge3' -Recurse -Include "python.exe", "conda.exe" | % { $_.FullName }

    # make sure conda is on the path first in the path
    - $Env:Path = 'C:\ProgramData\miniforge3\;' +
                  'C:\ProgramData\miniforge3\Scripts;' +
                  'C:\ProgramData\miniforge3\Lib\bin;' +
                  $Env:PathOrig
    - $Env:Path -split ';'

    - python -c "import sys; print(sys.executable)"

    # This might be changing our current directory, so we re-establish it
    # after initializing the powershell hooks.
    - Invoke-Expression "conda shell.powershell hook"
    - cd $Env:CurrDir

    - conda config --add channels defaults
    - conda config --add channels conda-forge
    - conda config --get channels
    - conda config --set channel_priority strict

    - conda create -y -p ./pygnome python=$PYTHON_VER

    - $Env:Path = '' +
                  (Get-Location) + '\pygnome\;' +
                  (Get-Location) + '\pygnome\Scripts\;' +
                  (Get-Location) + '\pygnome\Lib\bin\;' +
                  $Env:PathOrig
    - conda activate '' + (Get-Location) + '\pygnome'
  script:
    - echo "Building and testing PyGNOME"

    # get the adios_db code: needed for tests and requirements
    - git clone --depth 1 -b develop https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.orr.noaa.gov/gnome/oil_database/oil_database.git

    - conda install -y python=$PYTHON_VER mamba
    - cd ./py_gnome
    - echo "Setting up conda environment"
    - mamba install -y python=$PYTHON_VER --file conda_requirements.txt
                                          --file conda_requirements_build.txt
                                          --file conda_requirements_test.txt
                                          --file ../oil_database/adios_db/conda_requirements.txt

    - echo "Building PyGNOME"
    # If you want verbose output including the compiler/linker commands,
    # run the following command:
    #   python -m build --no-isolation --config-setting cmake.verbose=true
    - python -m pip install ./

    - cd ./tests/unit_tests
    - pytest --runslow
    - cd ../../..

build_develop:
  stage: build
  only:
    - develop
    - new_build
  tags:
    - shell
    - build
  before_script:
    - echo '' # manual override of before_script because we're on runner 12.3 and inherit options are only 12.9+
  script:
    # get the adios_db code, so we can install it in the docker image
    # note -- is should already be there
    - git clone --depth 1 -b develop https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.orr.noaa.gov/gnome/oil_database/oil_database.git

    # build the py_gnome image
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . --build-arg PYTHON_VER=$PYTHON_VER -t registry.orr.noaa.gov/gnome/pygnome:$CI_COMMIT_BRANCH
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push registry.orr.noaa.gov/gnome/pygnome:$CI_COMMIT_BRANCH

build_main:
  stage: build
  only:
    - main
  tags:
    - shell
    - build
  before_script:
    - echo '' # manual override of before_script because we're on runner 12.3 and inherit options are only 12.9+
  script:
    # get the adios_db code, so we can install it in the docker image
    # note -- is should already be there
    - git clone --depth 1 -b production https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.orr.noaa.gov/gnome/oil_database/oil_database.git

    # build the docs image
    - docker build -f dockerfile-docs ./py_gnome/documentation/build/html -t registry.orr.noaa.gov/gnome/pygnome/docs
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push registry.orr.noaa.gov/gnome/pygnome/docs

    # build the py_gnome image
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . --build-arg PYTHON_VER=$PYTHON_VER -t registry.orr.noaa.gov/gnome/pygnome:main
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push registry.orr.noaa.gov/gnome/pygnome:main
    
build_production:
  stage: build
  only:
    - production
  tags:
     - shell
     - build
  before_script:
    - echo ''
  script:
    # get the adios_db code, so we can install it in the docker image
    - git clone --depth 1 -b production https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.orr.noaa.gov/gnome/oil_database/oil_database.git

    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . --build-arg PYTHON_VER=$PYTHON_VER -t registry.orr.noaa.gov/gnome/pygnome:production
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push registry.orr.noaa.gov/gnome/pygnome:production
